/* The following code was generated by JFlex 1.6.1 */

/* JavaScriptLexer.java is a generated file.  You probably want to
 * edit JavaScriptLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JavaScriptLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JavaScriptLexer.lex</code><br>
 * You will then have a file called JavaScriptLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.jsql.view.swing.sql.lexer.syntax;

import java.io.IOException;

/**
 * JavaScriptLexer is a java script lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JavaScriptLexer shredder = new JavaScriptLexer(System.in);
 *  JavaScriptToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the
 * <A Href="http://developer.netscape.com/docs/manuals/communicator/jsref/index.htm">
 * Java Script Reference</A>.
 * @see JavaScriptToken
 */


public class JavaScriptLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\7\1\11\1\0\1\7\1\11\22\0\1\7\1\24\1\22"+
    "\1\0\1\6\1\12\1\60\1\21\1\43\1\44\1\27\1\30\1\52"+
    "\1\25\1\42\1\26\1\4\3\5\4\3\2\2\1\57\1\51\1\23"+
    "\1\53\1\54\1\56\1\0\3\1\1\41\1\36\1\37\5\6\1\32"+
    "\13\6\1\34\2\6\1\47\1\10\1\50\1\62\1\6\1\0\1\63"+
    "\1\16\1\65\1\40\1\35\1\17\1\73\1\71\1\72\1\6\1\67"+
    "\1\31\1\74\1\15\1\66\1\75\1\6\1\14\1\64\1\20\1\13"+
    "\1\76\1\77\1\33\1\70\1\100\1\45\1\61\1\46\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\5\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\3\2\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\10\2\1\37\1\40\1\41\1\37\2\42"+
    "\1\37\2\43\1\44\2\37\2\45\1\1\1\46\16\2"+
    "\1\47\1\0\1\50\1\51\1\52\1\53\1\0\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\4\2\1\66\1\42\1\45\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\12\2\1\77\1\100"+
    "\11\2\1\42\1\0\1\101\1\102\1\45\1\0\1\1"+
    "\2\2\1\103\7\2\1\104\2\2\1\105\2\2\1\6"+
    "\1\0\1\106\2\47\1\6\2\51\1\7\1\107\1\0"+
    "\1\61\5\2\1\40\1\0\1\42\1\44\1\0\1\45"+
    "\1\110\1\111\13\2\1\112\7\2\1\113\3\2\1\42"+
    "\1\114\1\45\1\1\1\2\1\115\3\2\1\116\4\2"+
    "\1\117\1\2\1\120\1\6\1\121\1\51\1\0\1\122"+
    "\1\123\1\124\3\2\1\125\10\2\1\126\2\2\1\127"+
    "\4\2\1\130\4\2\1\131\1\2\1\132\1\1\2\2"+
    "\1\133\2\2\1\134\1\135\1\136\1\137\1\6\1\51"+
    "\1\0\4\2\1\140\2\2\1\141\1\2\1\142\1\143"+
    "\1\2\1\144\10\2\1\145\1\146\1\147\3\2\1\150"+
    "\1\6\1\51\1\0\2\2\1\151\1\2\1\152\1\2"+
    "\1\153\4\2\1\154\1\155\3\2\1\156\1\2\1\157"+
    "\1\0\1\160\1\161\7\2\1\162\1\163\1\164\1\0"+
    "\1\165\1\2\1\166\5\2\1\167\2\2\1\170\1\2"+
    "\1\171\1\172\1\2\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u0659\0\u0659\0\u0659\0\u0659\0\u0659\0\u0659"+
    "\0\u0659\0\u069a\0\u06db\0\u0659\0\u0659\0\u0659\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u09e7\0\u09e7\0\u0a28\0\u09e7\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u09e7\0\u0b6d\0\u0bae\0\u09e7\0\u0bef\0\u0c30"+
    "\0\u0659\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u0659\0\u1081\0\u0659\0\u10c2\0\u1103\0\u0659\0\u0659"+
    "\0\u0659\0\u0659\0\u1144\0\u1185\0\u0659\0\u0659\0\u0659\0\u0659"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u0659"+
    "\0\u0659\0\u138d\0\u0659\0\u0659\0\u0659\0\u0659\0\u0659\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u1658\0\202\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u09e7\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\202\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\202\0\u1cb1\0\u1cf2"+
    "\0\202\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u0659\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u0659\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u2102\0\u2143\0\u0659\0\u2184\0\u0659\0\u0659"+
    "\0\u21c5\0\u0659\0\u0659\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512"+
    "\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\202"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\u09e7\0\u281e\0\u285f\0\u28a0"+
    "\0\202\0\u28e1\0\u2922\0\u2963\0\202\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\202\0\u2aa8\0\202\0\u2ae9\0\u0659\0\u2b2a\0\u2b6b"+
    "\0\u0659\0\202\0\202\0\u2bac\0\u2bed\0\u2c2e\0\u0659\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\202"+
    "\0\u2e77\0\u2eb8\0\202\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\202"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\202\0\u3101\0\202\0\u3142"+
    "\0\u3183\0\u31c4\0\202\0\u3205\0\u3246\0\202\0\202\0\u3287"+
    "\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\202\0\u34d0\0\u3511\0\202\0\u3552\0\202\0\202\0\u3593"+
    "\0\202\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a"+
    "\0\u379b\0\202\0\202\0\202\0\u37dc\0\u381d\0\u385e\0\202"+
    "\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\202\0\u39e4\0\202"+
    "\0\u3a25\0\202\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\202\0\202"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\202\0\u3c2d\0\202\0\u3c6e\0\202"+
    "\0\202\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\202\0\202\0\202\0\u3e76\0\202\0\u3eb7\0\202\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\202\0\u403d\0\u407e\0\202"+
    "\0\u40bf\0\202\0\202\0\u4100\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\3\1\6\1\7"+
    "\1\6\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\3\3\1\27\2\3\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\4\3\1\55\1\56\1\3\1\57\1\60"+
    "\1\61\1\3\7\2\1\0\1\2\2\0\6\2\10\0"+
    "\11\2\21\0\17\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\16\3\2\62\4\4\1\62\1\0"+
    "\1\62\2\0\4\62\1\63\1\62\10\0\2\64\2\62"+
    "\2\65\1\63\2\66\1\67\20\0\20\62\1\70\1\71"+
    "\1\72\1\71\1\62\1\0\1\62\2\0\4\62\1\73"+
    "\1\62\10\0\2\64\2\74\2\75\1\73\2\76\1\77"+
    "\20\0\16\62\7\0\1\6\1\0\1\6\67\0\7\2"+
    "\1\0\1\2\2\0\1\100\5\2\10\0\11\2\21\0"+
    "\16\2\53\0\1\101\25\0\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\102\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\103\5\3\10\0"+
    "\4\3\1\104\4\3\21\0\1\105\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\106\4\3\10\0\11\3"+
    "\21\0\3\3\1\107\1\3\1\110\10\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\111\5\3\10\0\1\112\10\3"+
    "\21\0\1\113\2\3\1\114\3\3\1\115\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\116\4\3\10\0"+
    "\11\3\21\0\6\3\1\117\7\3\10\120\1\121\1\0"+
    "\7\120\1\122\57\120\10\17\1\123\1\0\10\17\1\124"+
    "\56\17\23\0\1\125\1\126\26\0\1\127\100\0\1\130"+
    "\52\0\1\131\25\0\1\132\53\0\1\133\1\134\23\0"+
    "\1\135\100\0\1\136\55\0\1\137\22\0\1\140\25\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\141\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\1\142\1\3\1\143\6\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\4\3\1\144\4\3\21\0\3\3\1\145\12\3\2\0"+
    "\2\146\1\147\1\146\247\0\1\150\100\0\1\151\1\152"+
    "\77\0\1\153\4\0\1\154\73\0\1\155\5\0\1\156"+
    "\72\0\1\157\25\0\1\2\6\3\1\0\1\7\2\0"+
    "\3\3\1\160\2\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\161\4\3\1\162\10\0"+
    "\11\3\21\0\5\3\1\163\1\164\5\3\1\165\1\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\1\166"+
    "\10\3\21\0\1\167\2\3\1\170\2\3\1\171\7\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\172\1\3"+
    "\1\173\1\3\10\0\11\3\21\0\11\3\1\174\4\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\175\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\176\1\177\4\3\10\0\11\3\21\0\1\200"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\201\2\3\1\202\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\6\3"+
    "\1\203\1\204\6\3\7\62\1\0\1\62\2\0\6\62"+
    "\10\0\12\62\20\0\20\62\4\205\1\62\1\0\1\62"+
    "\2\0\6\62\4\0\1\206\2\0\1\206\12\62\20\0"+
    "\20\62\4\67\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\4\62\2\65\1\63\2\66\1\62\20\0"+
    "\20\62\4\70\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\4\62\2\65\1\63\2\66\1\67\20\0"+
    "\20\62\1\70\3\71\1\62\1\0\1\62\2\0\4\62"+
    "\1\63\1\62\10\0\2\207\2\62\2\65\1\63\2\66"+
    "\1\67\20\0\20\62\1\70\1\71\1\72\1\71\1\62"+
    "\1\0\1\62\2\0\4\62\1\73\1\62\10\0\2\207"+
    "\2\62\2\75\1\73\2\76\1\77\20\0\17\62\5\210"+
    "\1\62\1\0\1\62\2\0\3\62\2\210\1\62\10\0"+
    "\4\62\5\210\1\62\20\0\1\210\1\62\1\210\15\62"+
    "\4\211\1\62\1\0\1\62\2\0\6\62\4\0\1\212"+
    "\2\0\1\212\12\62\20\0\20\62\2\67\1\77\1\67"+
    "\1\62\1\0\1\62\2\0\4\62\1\73\1\62\10\0"+
    "\4\62\2\75\1\73\2\76\1\62\20\0\16\62\1\2"+
    "\5\213\1\2\1\0\1\2\2\0\3\2\2\213\1\2"+
    "\10\0\4\2\5\213\21\0\1\213\1\2\1\213\14\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\214\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\1\215\10\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\14\3\1\216"+
    "\1\3\1\2\6\3\1\0\1\7\2\0\5\3\1\217"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\220\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\221\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\222\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\2\3\1\223\3\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\3\3\1\224\12\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\225\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\226\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\227\3\3\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\230"+
    "\5\3\10\0\11\3\21\0\5\3\1\231\10\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\232\4\3\10\0"+
    "\11\3\21\0\7\3\1\233\6\3\10\234\1\235\1\0"+
    "\7\234\1\236\62\234\1\237\2\240\2\234\1\120\1\0"+
    "\1\234\1\241\7\120\56\234\3\242\3\17\2\242\1\17"+
    "\1\0\1\242\1\243\6\17\1\244\56\242\53\0\1\245"+
    "\52\0\1\246\53\0\11\133\1\0\67\133\27\134\1\247"+
    "\51\134\1\2\6\3\1\0\1\7\2\0\2\3\1\250"+
    "\3\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\1\3\1\251"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\5\3\1\252"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\4\3\1\253\1\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\254\5\3\10\0"+
    "\11\3\21\0\16\3\2\0\4\146\11\0\1\255\15\0"+
    "\2\256\1\255\2\257\41\0\2\146\1\147\1\146\11\0"+
    "\1\260\15\0\2\261\1\260\2\262\112\0\1\263\1\264"+
    "\24\0\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\3\1\265\14\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\12\3\1\266"+
    "\3\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\267\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\270\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\271\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\7\3\1\272\6\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\273\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\274\10\0\11\3\21\0\1\3\1\275\14\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\276\3\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\1\277\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\300\10\0\11\3"+
    "\21\0\1\3\1\301\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\12\3\1\302\3\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\303\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\3\3\1\304\2\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\3\3\1\305\3\3\1\306\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\2\3\1\307"+
    "\13\3\1\2\6\3\1\0\1\7\2\0\1\3\1\310"+
    "\4\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\7\3\1\311"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\7\3\1\312\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\313\10\0\11\3\21\0\16\3"+
    "\2\62\4\205\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\6\62\1\63\2\66\1\62\20\0\16\62"+
    "\2\0\4\314\73\0\1\62\5\210\1\62\1\0\1\62"+
    "\2\0\3\62\2\210\1\62\10\0\2\315\2\62\5\210"+
    "\1\62\20\0\1\210\1\62\1\210\15\62\4\211\1\62"+
    "\1\0\1\62\2\0\4\62\1\73\1\62\10\0\6\62"+
    "\1\73\2\76\1\62\20\0\16\62\2\0\4\316\73\0"+
    "\1\2\5\317\1\2\1\0\1\2\2\0\3\2\2\317"+
    "\1\2\10\0\4\2\5\317\21\0\1\317\1\2\1\317"+
    "\14\2\6\3\1\0\1\7\2\0\1\320\5\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\1\321\10\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\7\3"+
    "\1\322\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\323\15\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\1\324\10\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\325\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\326\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\327\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\3\1\330\14\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\1\331\15\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\332\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\3\3"+
    "\1\333\12\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\334\14\3\10\234\1\235"+
    "\1\0\7\234\1\122\70\234\1\0\72\234\3\120\2\234"+
    "\1\235\1\0\7\234\1\236\62\234\3\237\2\234\1\235"+
    "\1\0\7\234\1\236\60\234\5\335\2\234\1\235\1\0"+
    "\4\234\2\335\1\234\1\122\13\234\5\335\21\234\1\335"+
    "\1\234\1\335\13\234\11\242\1\0\10\242\1\336\57\242"+
    "\5\337\3\242\1\0\4\242\2\337\2\242\1\336\12\242"+
    "\5\337\21\242\1\337\1\242\1\337\13\242\10\244\1\340"+
    "\1\0\10\244\1\124\56\244\25\0\1\133\53\0\26\134"+
    "\1\341\1\247\51\134\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\10\3\1\342\5\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\343"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\344\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\1\345\15\3\1\2\6\3\1\0\1\7\2\0\3\3"+
    "\1\346\2\3\10\0\11\3\21\0\16\3\2\0\4\314"+
    "\17\0\1\206\2\0\1\206\52\0\4\316\17\0\1\212"+
    "\2\0\1\212\123\0\1\347\25\0\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\350\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\351\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\352\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\2\3\1\353\13\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\354\4\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\355\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\356\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\2\3"+
    "\1\357\13\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\360\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\361\10\0\11\3\21\0"+
    "\1\3\1\362\14\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\363\4\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\364"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\365\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\1\366\10\3\21\0"+
    "\3\3\1\367\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\3\3\1\370\12\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\371\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\372\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\13\3\1\373"+
    "\2\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\4\3\1\374\11\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\7\3\1\375\1\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\1\376\10\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\6\3\1\377\7\3"+
    "\2\0\4\314\11\0\1\255\17\0\1\255\2\257\41\0"+
    "\4\316\11\0\1\260\17\0\1\260\2\262\37\0\1\2"+
    "\5\u0100\1\2\1\0\1\2\2\0\3\2\2\u0100\1\2"+
    "\10\0\4\2\5\u0100\21\0\1\u0100\1\2\1\u0100\14\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\u0101\4\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\13\3\1\u0102\2\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\4\3\1\u0103\11\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0104\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0105\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u0106\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\4\3\1\u0107\4\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\1\u0108\10\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\14\3\1\u0109\1\3"+
    "\1\234\5\u010a\2\234\1\235\1\0\4\234\2\u010a\1\234"+
    "\1\122\13\234\5\u010a\21\234\1\u010a\1\234\1\u010a\13\234"+
    "\1\242\5\u010b\3\242\1\0\4\242\2\u010b\2\242\1\336"+
    "\12\242\5\u010b\21\242\1\u010b\1\242\1\u010b\13\242\3\0"+
    "\3\244\2\0\1\244\2\0\1\u010c\7\244\56\0\1\2"+
    "\6\3\1\0\1\7\2\0\2\3\1\u010d\3\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\u010e\5\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\1\u010f\10\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\1\3\1\u0110"+
    "\4\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\3\1\u0111\4\3\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\7\3\1\u0112\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\6\3\1\u0113"+
    "\7\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0114"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\u0115\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\3\1\u0116\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\6\3\1\u0117\7\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\7\3\1\u0118\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u0119\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\u011a\4\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\u011b\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\4\3\1\u011c\4\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\u011d\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\7\3"+
    "\1\u011e\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\u011f\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\1\u0120"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\u0121\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\u0122\4\3\21\0\16\3"+
    "\1\2\5\3\1\2\1\0\1\2\2\0\3\2\2\3"+
    "\1\2\10\0\4\2\5\3\21\0\1\3\1\2\1\3"+
    "\14\2\6\3\1\0\1\7\2\0\2\3\1\u0123\3\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\u0124\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\u0125\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\7\3\1\u0126\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\u0127\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\u0128\14\3\1\234\5\u0129"+
    "\2\234\1\235\1\0\4\234\2\u0129\1\234\1\122\13\234"+
    "\5\u0129\21\234\1\u0129\1\234\1\u0129\13\234\1\242\5\u012a"+
    "\3\242\1\0\4\242\2\u012a\2\242\1\336\12\242\5\u012a"+
    "\21\242\1\u012a\1\242\1\u012a\13\242\1\0\5\u012b\10\0"+
    "\2\u012b\15\0\5\u012b\21\0\1\u012b\1\0\1\u012b\13\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\7\3"+
    "\1\u012c\1\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\1\u012d\10\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\u012e"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\u012f\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\2\3"+
    "\1\u0130\13\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\u0131\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\6\3"+
    "\1\u0132\7\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u0133\3\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\4\3\1\u0134\1\3\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u0135\3\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\11\3"+
    "\1\u0136\4\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u0137\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\2\3\1\u0138"+
    "\13\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\2\3\1\u0139\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u013a\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\10\3\1\u013b\5\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u013c\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\u013d\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\5\3\1\u013e\10\3"+
    "\1\234\5\120\2\234\1\235\1\0\4\234\2\120\1\234"+
    "\1\122\13\234\5\120\21\234\1\120\1\234\1\120\13\234"+
    "\1\242\5\17\3\242\1\0\4\242\2\17\2\242\1\336"+
    "\12\242\5\17\21\242\1\17\1\242\1\17\13\242\1\0"+
    "\5\u013f\10\0\2\u013f\15\0\5\u013f\21\0\1\u013f\1\0"+
    "\1\u013f\13\0\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\u0140\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u0141\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\2\3\1\u0142\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\3\3\1\u0143"+
    "\12\3\1\2\6\3\1\0\1\7\2\0\1\u0144\5\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\1\u0145\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\2\3\1\u0146\13\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0147\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0148\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\u0149\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\4\3\1\u014a\4\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u014b\3\3\10\0\11\3\21\0\16\3\1\0\5\u014c"+
    "\10\0\2\u014c\15\0\5\u014c\21\0\1\u014c\1\0\1\u014c"+
    "\13\0\1\2\6\3\1\0\1\7\2\0\5\3\1\u014d"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u014e\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u014f\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\u0150\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u0151\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u0152\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u0153\4\3\21\0\16\3\1\0\5\244\10\0\2\244"+
    "\15\0\5\244\21\0\1\244\1\0\1\244\13\0\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\7\3\1\u0154\6\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0155\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\3\3\1\u0156\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\u0157\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\7\3\1\u0158\1\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\15\3\1\u0159\1\2\6\3\1\0"+
    "\1\7\2\0\4\3\1\u015a\1\3\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\3\1\u015b\14\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\4\3\1\u015c\4\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\7\3\1\u015d\1\3\21\0\16\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16705];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\30\1\10\11\2\1\3\11\32\1\1\11\17\1"+
    "\1\0\1\11\1\1\1\11\1\1\1\0\4\11\2\1"+
    "\4\11\7\1\2\11\1\1\5\11\26\1\1\0\3\1"+
    "\1\0\22\1\1\0\1\11\6\1\1\11\1\0\6\1"+
    "\1\11\1\0\2\11\1\0\2\11\52\1\1\11\1\1"+
    "\1\0\1\11\5\1\1\11\44\1\1\0\36\1\1\0"+
    "\23\1\1\0\14\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[349];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    int lastToken;

    private int nextState=YYINITIAL;
    
    /**
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = this.getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = this.getNextToken();
        }
        return (t);
    }

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
     * All internal variables are reset, the old input stream  cannot be reused
     * (content of the internal buffer is discarded and lost).
     * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    @Override
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        this.yyreset(reader);
        this.yyline = yyline;
        this.yychar = yychar;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (this.zzStartRead > 0) {
      this.zzEndRead += this.zzFinalHighSurrogate;
      this.zzFinalHighSurrogate = 0;
      System.arraycopy(this.zzBuffer, this.zzStartRead,
                       this.zzBuffer, 0,
                       this.zzEndRead-this.zzStartRead);

      /* translate stored positions */
      this.zzEndRead-= this.zzStartRead;
      this.zzCurrentPos-= this.zzStartRead;
      this.zzMarkedPos-= this.zzStartRead;
      this.zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (this.zzCurrentPos >= this.zzBuffer.length - this.zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[this.zzBuffer.length*2];
      System.arraycopy(this.zzBuffer, 0, newBuffer, 0, this.zzBuffer.length);
      this.zzBuffer = newBuffer;
      this.zzEndRead += this.zzFinalHighSurrogate;
      this.zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = this.zzBuffer.length - this.zzEndRead;
    int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      this.zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(this.zzBuffer[this.zzEndRead - 1])) {
          --this.zzEndRead;
          this.zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    this.zzAtEOF = true;            /* indicate end of file */
    this.zzEndRead = this.zzStartRead;  /* invalidate buffer    */

    if (this.zzReader != null)
      this.zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    this.zzReader = reader;
    this.zzAtEOF  = false;
    this.zzEndRead = this.zzStartRead = 0;
    this.zzCurrentPos = this.zzMarkedPos = 0;
    this.zzFinalHighSurrogate = 0;
    this.yyline = this.yychar = 0;
    this.zzLexicalState = YYINITIAL;
    if (this.zzBuffer.length > ZZ_BUFFERSIZE)
      this.zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return this.zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( this.zzBuffer, this.zzStartRead, this.zzMarkedPos-this.zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return this.zzMarkedPos-this.zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > this.yylength() )
      this.zzScanError(ZZ_PUSHBACK_2BIG);

    this.zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = this.zzEndRead;
    char [] zzBufferL = this.zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = this.zzMarkedPos;

      this.yychar+= zzMarkedPosL-this.zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = this.zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          this.yyline++;
          zzR = false;
          break;
        case '\r':
          this.yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            this.yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (this.zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = this.zzRefill();
          zzEndReadL = this.zzEndRead;
          zzMarkedPosL = this.zzMarkedPos;
          zzBufferL = this.zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) this.yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
  
      this.zzState = ZZ_LEXSTATE[this.zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[this.zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = this.zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (this.zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            this.zzCurrentPos  = zzCurrentPosL;
            this.zzMarkedPos   = zzMarkedPosL;
            boolean eof = this.zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = this.zzCurrentPos;
            zzMarkedPosL   = this.zzMarkedPos;
            zzBufferL      = this.zzBuffer;
            zzEndReadL     = this.zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[this.zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          this.zzState = zzNext;

          zzAttributes = zzAttrL[this.zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = this.zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      this.zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
        this.zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { this.lastToken = JavaScriptToken.ERROR_IDENTIFIER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 124: break;
          case 2:
            { this.lastToken = JavaScriptToken.IDENTIFIER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 125: break;
          case 3:
            { /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large
     */
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (this.lastToken == JavaScriptToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + this.yytext());
        } else {
            Integer.decode(this.yytext());
        }
        this.lastToken = JavaScriptToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        this.lastToken = JavaScriptToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 126: break;
          case 4:
            { this.lastToken = JavaScriptToken.WHITE_SPACE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 127: break;
          case 5:
            { this.lastToken = JavaScriptToken.OPERATOR_MOD;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 128: break;
          case 6:
            { this.lastToken = JavaScriptToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 129: break;
          case 7:
            { /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it
     * to slip through the cracks.
     */
    this.lastToken = JavaScriptToken.ERROR_UNCLOSED_STRING;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 130: break;
          case 8:
            { this.lastToken = JavaScriptToken.OPERATOR_LESS_THAN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 131: break;
          case 9:
            { this.lastToken = JavaScriptToken.OPERATOR_LOGICAL_NOT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 132: break;
          case 10:
            { this.lastToken = JavaScriptToken.OPERATOR_SUBTRACT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 133: break;
          case 11:
            { this.lastToken = JavaScriptToken.OPERATOR_DIVIDE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 134: break;
          case 12:
            { this.lastToken = JavaScriptToken.OPERATOR_MULTIPLY;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 135: break;
          case 13:
            { this.lastToken = JavaScriptToken.OPERATOR_ADD;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 136: break;
          case 14:
            { this.lastToken = JavaScriptToken.SEPARATOR_PERIOD;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 137: break;
          case 15:
            { this.lastToken = JavaScriptToken.SEPARATOR_LPAREN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 138: break;
          case 16:
            { this.lastToken = JavaScriptToken.SEPARATOR_RPAREN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 139: break;
          case 17:
            { this.lastToken = JavaScriptToken.SEPARATOR_LBRACE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 140: break;
          case 18:
            { this.lastToken = JavaScriptToken.SEPARATOR_RBRACE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 141: break;
          case 19:
            { this.lastToken = JavaScriptToken.SEPARATOR_LBRACKET;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 142: break;
          case 20:
            { this.lastToken = JavaScriptToken.SEPARATOR_RBRACKET;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 143: break;
          case 21:
            { this.lastToken = JavaScriptToken.SEPARATOR_SEMICOLON;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 144: break;
          case 22:
            { this.lastToken = JavaScriptToken.SEPARATOR_COMMA;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 145: break;
          case 23:
            { this.lastToken = JavaScriptToken.OPERATOR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 146: break;
          case 24:
            { this.lastToken = JavaScriptToken.OPERATOR_GREATER_THAN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 147: break;
          case 25:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_COMPLIMENT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 148: break;
          case 26:
            { this.lastToken = JavaScriptToken.OPERATOR_QUESTION;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 149: break;
          case 27:
            { this.lastToken = JavaScriptToken.OPERATOR_COLON;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 150: break;
          case 28:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_AND;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 151: break;
          case 29:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_OR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 152: break;
          case 30:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_XOR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+1, this.nextState));
    return (t);
            }
          case 153: break;
          case 31:
            { this.lastToken = JavaScriptToken.ERROR_FLOAT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 154: break;
          case 32:
            { /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */
    Float f;
    try {
        f = Float.valueOf(this.yytext());
        if (f.isInfinite() || f.compareTo(new Float(0f)) == 0){
            this.lastToken = JavaScriptToken.ERROR_FLOAT_SIZE;
        } else {
            this.lastToken = JavaScriptToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        this.lastToken = JavaScriptToken.ERROR_FLOAT_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 155: break;
          case 33:
            { try {
        if (this.lastToken == JavaScriptToken.OPERATOR_SUBTRACT){
            Long.decode('-' + this.yytext().substring(0,this.yytext().length()-1));
        } else {
            Long.decode(this.yytext().substring(0,this.yytext().length()-1));
        }
        this.lastToken = JavaScriptToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){
        this.lastToken = JavaScriptToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 156: break;
          case 34:
            { Double d;
    try {
        d = Double.valueOf(this.yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            this.lastToken = JavaScriptToken.ERROR_DOUBLE_SIZE;
        } else {
            this.lastToken = JavaScriptToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        this.lastToken = JavaScriptToken.ERROR_DOUBLE_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 157: break;
          case 35:
            { /* An Octal number cannot be too big.  After removing
     * initial zeros, It can have 11 digits, the first
     * of which must be 3 or less.
     */
    this.lastToken = JavaScriptToken.LITERAL_INTEGER_OCTAL;
    int i;
    int length =this.yytext().length();
    for (i=1 ; i<length-11; i++){
        //check for initial zeros
        if (this.yytext().charAt(i) != '0'){
            this.lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    if (length - i > 11){
        this.lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
    } else if (length - i == 11){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (this.yytext().charAt(i) != '0' && this.yytext().charAt(i) != '1' &&
        this.yytext().charAt(i) != '2' && this.yytext().charAt(i) != '3'){
            this.lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 158: break;
          case 36:
            { /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    this.lastToken = JavaScriptToken.LITERAL_FLOATING_POINT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 159: break;
          case 37:
            { this.lastToken = JavaScriptToken.LITERAL_DOUBLE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 160: break;
          case 38:
            { this.lastToken = JavaScriptToken.OPERATOR_MOD_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 161: break;
          case 39:
            { this.lastToken = JavaScriptToken.ERROR_UNCLOSED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 162: break;
          case 40:
            { this.lastToken = JavaScriptToken.ERROR_MALFORMED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 163: break;
          case 41:
            { this.lastToken = JavaScriptToken.ERROR_MALFORMED_UNCLOSED_STRING;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 164: break;
          case 42:
            { this.lastToken = JavaScriptToken.LITERAL_STRING;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 165: break;
          case 43:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_LEFT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 166: break;
          case 44:
            { this.lastToken = JavaScriptToken.OPERATOR_LESS_THAN_OR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 167: break;
          case 45:
            { this.lastToken = JavaScriptToken.OPERATOR_NOT_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 168: break;
          case 46:
            { this.lastToken = JavaScriptToken.OPERATOR_DECREMENT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 169: break;
          case 47:
            { this.lastToken = JavaScriptToken.OPERATOR_SUBTRACT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 170: break;
          case 48:
            { this.lastToken = JavaScriptToken.COMMENT_END_OF_LINE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 171: break;
          case 49:
            { this.lastToken = JavaScriptToken.ERROR_UNCLOSED_COMMENT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 172: break;
          case 50:
            { this.lastToken = JavaScriptToken.OPERATOR_DIVIDE_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 173: break;
          case 51:
            { this.lastToken = JavaScriptToken.OPERATOR_MULTIPLY_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 174: break;
          case 52:
            { this.lastToken = JavaScriptToken.OPERATOR_INCREMENT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 175: break;
          case 53:
            { this.lastToken = JavaScriptToken.OPERATOR_ADD_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 176: break;
          case 54:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_DO;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+2, this.nextState));
    return (t);
            }
          case 177: break;
          case 55:
            { this.lastToken = JavaScriptToken.OPERATOR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 178: break;
          case 56:
            { this.lastToken = JavaScriptToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 179: break;
          case 57:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 180: break;
          case 58:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_AND_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 181: break;
          case 59:
            { this.lastToken = JavaScriptToken.OPERATOR_LOGICAL_AND;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 182: break;
          case 60:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_OR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 183: break;
          case 61:
            { this.lastToken = JavaScriptToken.OPERATOR_LOGICAL_OR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 184: break;
          case 62:
            { this.lastToken = JavaScriptToken.OPERATOR_BITWISE_XOR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+2, this.nextState));
    return (t);
            }
          case 185: break;
          case 63:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_IN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+2, this.nextState));
    return (t);
            }
          case 186: break;
          case 64:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_IF;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+2, this.nextState));
    return (t);
            }
          case 187: break;
          case 65:
            { /* An Octal number cannot be too big.  After removing
     * initial zeros, It can have 23 digits, the first
     * of which must be 1 or less.  The last will be the L or l
     * at the end.
     */
    this.lastToken = JavaScriptToken.LITERAL_LONG_OCTAL;
    int i;
    int length =this.yytext().length();
    for (i=1 ; i<length-23; i++){
        //check for initial zeros
        if (this.yytext().charAt(i) != '0'){
            this.lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    if (length - i > 23){
        this.lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
    } else if (length - i == 23){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (this.yytext().charAt(i) != '0' && this.yytext().charAt(i) != '1'){
            this.lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 188: break;
          case 66:
            { /* A Hex number cannot be too big.  After removing
     * initial zeros, It can have 8 digits
     */
    this.lastToken = JavaScriptToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;
    int length =this.yytext().length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (this.yytext().charAt(i) != '0'){
            this.lastToken = JavaScriptToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        this.lastToken = JavaScriptToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 189: break;
          case 67:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_NEW;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+3, this.nextState));
    return (t);
            }
          case 190: break;
          case 68:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_FOR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+3, this.nextState));
    return (t);
            }
          case 191: break;
          case 69:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_TRY;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+3, this.nextState));
    return (t);
            }
          case 192: break;
          case 70:
            { this.lastToken = JavaScriptToken.LITERAL_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 193: break;
          case 71:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+3, this.nextState));
    return (t);
            }
          case 194: break;
          case 72:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+3, this.nextState));
    return (t);
            }
          case 195: break;
          case 73:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_UNSIGNED;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+3, this.nextState));
    return (t);
            }
          case 196: break;
          case 74:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_INT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+3, this.nextState));
    return (t);
            }
          case 197: break;
          case 75:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_VAR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+3, this.nextState));
    return (t);
            }
          case 198: break;
          case 76:
            { /* A Hex long cannot be too big.  After removing
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    this.lastToken = JavaScriptToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    int length =this.yytext().length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (this.yytext().charAt(i) != '0'){
            this.lastToken = JavaScriptToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        this.lastToken = JavaScriptToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 199: break;
          case 77:
            { this.lastToken = JavaScriptToken.LITERAL_NULL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 200: break;
          case 78:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_BYTE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 201: break;
          case 79:
            { this.lastToken = JavaScriptToken.LITERAL_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 202: break;
          case 80:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_THIS;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 203: break;
          case 81:
            { this.lastToken = JavaScriptToken.ERROR_MALFORMED_STRING;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 204: break;
          case 82:
            { this.lastToken = JavaScriptToken.COMMENT_TRADITIONAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar + this.yytext().length(), this.nextState));
    return (t);
            }
          case 205: break;
          case 83:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_LONG;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 206: break;
          case 84:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_ELSE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 207: break;
          case 85:
            { this.lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_UNSIGNED_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken,this.yytext(),this.yyline,this.yychar,this.yychar+4, this.nextState));
    return (t);
            }
          case 208: break;
          case 86:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CASE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 209: break;
          case 87:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CHAR;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 210: break;
          case 88:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_GOTO;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 211: break;
          case 89:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_VOID;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 212: break;
          case 90:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_WITH;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+4, this.nextState));
    return (t);
            }
          case 213: break;
          case 91:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_BREAK;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 214: break;
          case 92:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_FLOAT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 215: break;
          case 93:
            { this.lastToken = JavaScriptToken.LITERAL_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 216: break;
          case 94:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_FINAL;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 217: break;
          case 95:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_THROW;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 218: break;
          case 96:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_SUPER;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 219: break;
          case 97:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_SHORT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 220: break;
          case 98:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CLASS;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 221: break;
          case 99:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CATCH;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 222: break;
          case 100:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CONST;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+5, this.nextState));
    return (t);
            }
          case 223: break;
          case 101:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_TRANSIENT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+9, this.nextState));
    return (t);
            }
          case 224: break;
          case 102:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_RETURN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 225: break;
          case 103:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_NATIVE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 226: break;
          case 104:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_THROWS;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 227: break;
          case 105:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_DOUBLE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 228: break;
          case 106:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_STATIC;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 229: break;
          case 107:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_SWITCH;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 230: break;
          case 108:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_IMPORT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 231: break;
          case 109:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_PUBLIC;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+6, this.nextState));
    return (t);
            }
          case 232: break;
          case 110:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 233: break;
          case 111:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_FINALLY;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 234: break;
          case 112:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_EXTENDS;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 235: break;
          case 113:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_DEFAULT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 236: break;
          case 114:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_PRIVATE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 237: break;
          case 115:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_PACKAGE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 238: break;
          case 116:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_FUNCTION;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+8, this.nextState));
    return (t);
            }
          case 239: break;
          case 117:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_ABSTRACT;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+7, this.nextState));
    return (t);
            }
          case 240: break;
          case 118:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_CONTINUE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+8, this.nextState));
    return (t);
            }
          case 241: break;
          case 119:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_INTERFACE;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+9, this.nextState));
    return (t);
            }
          case 242: break;
          case 120:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_PROTECTED;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+9, this.nextState));
    return (t);
            }
          case 243: break;
          case 121:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_INSTANCEOF;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+10, this.nextState));
    return (t);
            }
          case 244: break;
          case 122:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_IMPLEMENTS;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+10, this.nextState));
    return (t);
            }
          case 245: break;
          case 123:
            { this.lastToken = JavaScriptToken.RESERVED_WORD_SYNCHRONIZED;
    JavaScriptToken t = (new JavaScriptToken(this.lastToken, this.yytext(), this.yyline, this.yychar, this.yychar+12, this.nextState));
    return (t);
            }
          case 246: break;
          default:
            this.zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
